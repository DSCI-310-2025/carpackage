[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"id_-our-pledge","dir":"","previous_headings":"","what":"** Our Pledge**","title":"Code of Conduct for carpacakge","text":"members project, recognize successful productive team thrives mutual respect, collaboration, accountability. pledge create environment every member feels heard, valued, empowered contribute best work. commit fostering culture learning, adaptability, shared responsibility, ensuring project technical success also positive inclusive experience involved. hold accountable values work together uphold throughout duration project.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"statement-on-diversity-and-inclusivity","dir":"","previous_headings":"","what":"Statement on Diversity and Inclusivity","title":"Code of Conduct for carpacakge","text":"committed fostering inclusive respectful environment individuals — regardless background, identity, experience — can collaborate, learn, contribute meaningfully project. community values diversity recognizes broad range perspectives enhances innovation problem-solving. Discrimination, harassment, exclusion kind tolerated.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"expected-behavior","dir":"","previous_headings":"","what":"Expected Behavior","title":"Code of Conduct for carpacakge","text":"contributors expected : Communicate respectfully professionally times. Actively listen consider differing viewpoints. Provide constructive feedback accept graciously. Contribute discussions tasks meaningful, honest, collaborative manner. Acknowledge credit work others appropriately. Support uplift team members, ensuring equitable distribution workload. Respect deadlines responsibilities maintain integrity project. Contribute fair amount work reflects capabilities.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"unacceptable-behavior","dir":"","previous_headings":"","what":"Unacceptable Behavior","title":"Code of Conduct for carpacakge","text":"Unacceptable behavior includes, limited : Discriminatory comments actions based race, ethnicity, gender, sexual orientation, religion, disability, characteristic. Harassment, including limited , personal attacks, intimidation, bullying. Inappropriate offensive language, including sexualized derogatory remarks. Disrupting group discussions project workflow. Plagiarism, misrepresentation contributions, failure credit others’ work. Unauthorized sharing project-related confidential data discussions. Repeated failure meet agreed-upon responsibilities without proper communication.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"consequences-of-unacceptable-behavior","dir":"","previous_headings":"","what":"Consequences of Unacceptable Behavior","title":"Code of Conduct for carpacakge","text":"Violation Code Conduct result appropriate consequences: private discussion project lead clarify nature violation provide guidance expected behavior. request formal acknowledgment issue commitment improved conduct.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"final-notes","dir":"","previous_headings":"","what":"Final Notes","title":"Code of Conduct for carpacakge","text":"Code Conduct living document may updated needed ensure remains effective relevant project community. team members encouraged provide feedback can improve commitment inclusive respectful working environment.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to Project","title":"Contributing to Project","text":"outlines propose change contribute project. welcome contributions team members project! ### Fixing typos Small typos grammatical errors documentation assigned personally may edited directly using GitHub web interface, long changes properly committed commented. notice bug, feature request another member’s allocated work, please open issue .","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to Project","text":"recommend create Git branch pull request (PR). ’d like contribute feature bug fix, can fork repo submit pull request. Pull requests including documentation code pretaining members reviewd within 7 days.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to Project","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 DSCI 310 Team 5 Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/carpackage-usage.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"carpackage-usage","text":"vignette demonstrates use carpackage R package clean, prepare, model car safety data using k-Nearest Neighbors (kNN) classifier. steps mirror workflow used DSCI 310 final project.","code":""},{"path":"/articles/carpackage-usage.html","id":"load-and-clean-the-data","dir":"Articles","previous_headings":"","what":"1. Load and Clean the Data","title":"carpackage-usage","text":"","code":"# Read car dataset df <- car_data  # Assign column names (as per UCI dataset) colnames(df) <- c(\"buying\", \"maint\", \"doors\", \"persons\", \"lug_boot\", \"safety\", \"class\")  # Check NAs and duplicates df_clean <- check_data_quality(df) #> Missing values found: 0 #> Duplicate rows found: 0 #> Cleaning completed. Returned cleaned dataframe. head(df_clean) #>   buying maint doors persons lug_boot safety class #> 1 buying maint doors persons lug_boot safety class #> 2  vhigh vhigh     2       2    small    low unacc #> 3  vhigh vhigh     2       2    small    med unacc #> 4  vhigh vhigh     2       2    small   high unacc #> 5  vhigh vhigh     2       2      med    low unacc #> 6  vhigh vhigh     2       2      med    med unacc"},{"path":"/articles/carpackage-usage.html","id":"encode-ordinal-categorical-variables","dir":"Articles","previous_headings":"","what":"2. Encode Ordinal Categorical Variables","title":"carpackage-usage","text":"","code":"# Encode ordinal variables into numeric format df_encoded <- df %>%   mutate(across(-safety, encode_levels)) %>%   mutate(safety = encode_safety(safety)) head(df_encoded) #>   buying maint doors persons lug_boot safety class #> 1     NA    NA    NA      NA       NA     NA    NA #> 2      4     4     2       2        1      1     1 #> 3      4     4     2       2        1      2     1 #> 4      4     4     2       2        1      3     1 #> 5      4     4     2       2        2      1     1 #> 6      4     4     2       2        2      2     1"},{"path":"/articles/carpackage-usage.html","id":"summarize-and-visualize-the-data","dir":"Articles","previous_headings":"","what":"3. Summarize and Visualize the Data","title":"carpackage-usage","text":"","code":"# View class distribution and key feature summaries summary_table <- summarize_data(df_encoded) #>      buying         maint          doors         persons         lug_boot #>  Min.   :1.00   Min.   :1.00   Min.   :2.00   Min.   :2.000   Min.   :1   #>  1st Qu.:1.75   1st Qu.:1.75   1st Qu.:2.75   1st Qu.:2.000   1st Qu.:1   #>  Median :2.50   Median :2.50   Median :3.50   Median :4.000   Median :2   #>  Mean   :2.50   Mean   :2.50   Mean   :3.50   Mean   :3.667   Mean   :2   #>  3rd Qu.:3.25   3rd Qu.:3.25   3rd Qu.:4.25   3rd Qu.:5.000   3rd Qu.:3   #>  Max.   :4.00   Max.   :4.00   Max.   :5.00   Max.   :5.000   Max.   :3   #>  NA's   :1      NA's   :1      NA's   :1      NA's   :1       NA's   :1   #>      safety      class       #>  Min.   :1   Min.   :1.000   #>  1st Qu.:1   1st Qu.:1.000   #>  Median :2   Median :1.000   #>  Mean   :2   Mean   :1.415   #>  3rd Qu.:3   3rd Qu.:2.000   #>  Max.   :3   Max.   :4.000   #>  NA's   :1   NA's   :1 print(summary_table) #>      buying         maint          doors         persons         lug_boot #>  Min.   :1.00   Min.   :1.00   Min.   :2.00   Min.   :2.000   Min.   :1   #>  1st Qu.:1.75   1st Qu.:1.75   1st Qu.:2.75   1st Qu.:2.000   1st Qu.:1   #>  Median :2.50   Median :2.50   Median :3.50   Median :4.000   Median :2   #>  Mean   :2.50   Mean   :2.50   Mean   :3.50   Mean   :3.667   Mean   :2   #>  3rd Qu.:3.25   3rd Qu.:3.25   3rd Qu.:4.25   3rd Qu.:5.000   3rd Qu.:3   #>  Max.   :4.00   Max.   :4.00   Max.   :5.00   Max.   :5.000   Max.   :3   #>  NA's   :1      NA's   :1      NA's   :1      NA's   :1       NA's   :1   #>      safety      class       #>  Min.   :1   Min.   :1.000   #>  1st Qu.:1   1st Qu.:1.000   #>  Median :2   Median :1.000   #>  Mean   :2   Mean   :1.415   #>  3rd Qu.:3   3rd Qu.:2.000   #>  Max.   :3   Max.   :4.000   #>  NA's   :1   NA's   :1"},{"path":"/articles/carpackage-usage.html","id":"run-the-knn-classifier","dir":"Articles","previous_headings":"","what":"4. Run the kNN Classifier","title":"carpackage-usage","text":"","code":"# Train/test split df_clean <- df_encoded %>%   na.omit() %>%   distinct() data_splitted <- split_data(df_clean, response_col = \"safety\", prop = 0.8) knn_results <- cross_validate_knn(data_splitted$train_x, data_splitted$train_y) #> Loading required package: lattice #>  #> Attaching package: 'caret' #> The following object is masked from 'package:purrr': #>  #>     lift  # Check predictions head(knn_results) #>    k  accuracy #> 1  1 0.3333115 #> 2  3 0.4599483 #> 3  5 0.4541563 #> 4  7 0.4649580 #> 5  9 0.4627972 #> 6 11 0.4765210"},{"path":"/articles/carpackage-usage.html","id":"evaluate-model-performance-with-best-parameters","dir":"Articles","previous_headings":"","what":"5. Evaluate Model Performance with best parameters","title":"carpackage-usage","text":"","code":"# Pick best k best_row <- knn_results[which.max(knn_results$accuracy), ] best_k <- best_row$k  # Train final model final_model <- train_final_model(data_splitted$train_x, data_splitted$train_y, best_k)  # Predict on test set predictions <- predict(final_model, data_splitted$test_x) # Calculate accuracy and view confusion matrix performance <- compute_test_accuracy(predictions, data_splitted$test_y) performance #> [1] 0.02608696"},{"path":"/articles/carpackage-usage.html","id":"visualize-the-confusion-matrix","dir":"Articles","previous_headings":"","what":"6. Visualize the Confusion Matrix","title":"carpackage-usage","text":"","code":"# Plot a heatmap-style confusion matrix plot_conf_matrix(predictions, data_splitted$test_y)"},{"path":"/articles/carpackage-usage.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"carpackage-usage","text":"carpackage provides streamlined pipeline preparing car evaluation data applying kNN classifier. built-support ordinal encoding, data quality checks, visual diagnostics, simplifies workflow categorical ML tasks like car safety prediction.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2025). carpackage: Package (One Line, Title Case). R package version 0.0.0.9000.","code":"@Manual{,   title = {carpackage: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"carpackage","dir":"","previous_headings":"","what":"carpackage","title":"carpackage","text":"R package cleaning preparing categorical car data machine learning classification tasks.","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"carpackage","text":"carpackage provides suite utility functions designed support preprocessing car evaluation datasets, specifically containing ordinal categorical variables. built part DSCI 310 project predicting vehicle safety using k-Nearest Neighbors (kNN). package includes tools : Cleaning missing duplicate data Encoding ordinal variables Checking dataset structure modeling Perform kNN analysis tools used analysis UCI Car Evaluation Dataset, attempted predict car safety levels using buying price, maintenance cost, number passengers, factors.","code":""},{"path":"/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"carpackage","text":"check_data_quality() – Cleans missing values duplicate rows encode_car_data() – Converts categorical car attributes ordinal numeric codes summarize_car_data() – Summarizes distributions highlights potential imbalance plot_encoded_distributions() – Visualizes encoded feature distributions quick EDA functions include graceful error handling optimized clean pipelines ML tasks.","code":""},{"path":[]},{"path":[]},{"path":"/index.html","id":"id_-when-to-use-carpackage","dir":"","previous_headings":"Where It Fits in the R Ecosystem","what":"🧭 When to Use carpackage","title":"carpackage","text":"Use package ’re working categorical car data, especially: - Student projects teaching datasets like UCI’s Car Evaluation - Conducts kNN distance-based analysis - Needing quick summaries visualizations encoded ordinal features ’s lightweight, easy--understand toolset designed R users want just enough preprocessing without diving full ML pipelines.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"carpackage","text":"can install development version carpackage like :","code":"# install.packages(\"devtools\") devtools::install_github(\"your-username/carpackage\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"carpackage","text":"basic example shows solve common problem:","code":"library(carpackage) ## check missing and duplicate values in dataset df <- data.frame(   make = c(\"Toyota\", \"Honda\", NA, \"Toyota\", \"Honda\"),   year = c(2010, 2012, 2011, 2010, 2012),   price = c(5000, 7000, 6500, 5000, 7000) )  nan_and_duplicates_summary <- check_data_quality(df) #> 🔍 Missing values found: 1 #> 🔁 Duplicate rows found: 2 #> ✅ Cleaning completed. Returned cleaned dataframe. nan_and_duplicates_summary #>     make year price #> 1 Toyota 2010  5000 #> 2  Honda 2012  7000"},{"path":"/index.html","id":"future-goals","dir":"","previous_headings":"","what":"Future Goals","title":"carpackage","text":"package update: -Newer improved functions car data analysis -comprehensive test cases Stay tuned!","code":""},{"path":"/reference/calculate_random_baseline.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate baseline accuracy — calculate_random_baseline","title":"Calculate baseline accuracy — calculate_random_baseline","text":"Calculate baseline accuracy","code":""},{"path":"/reference/calculate_random_baseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate baseline accuracy — calculate_random_baseline","text":"","code":"calculate_random_baseline(labels)"},{"path":"/reference/calculate_random_baseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate baseline accuracy — calculate_random_baseline","text":"labels Vector true class labels.","code":""},{"path":"/reference/calculate_random_baseline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate baseline accuracy — calculate_random_baseline","text":"Baseline accuracy using random guessing.","code":""},{"path":"/reference/calculate_random_baseline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate baseline accuracy — calculate_random_baseline","text":"","code":"# For binary classification (e.g., \"a\", \"b\"), baseline is 0.5 calculate_random_baseline(c(\"a\", \"b\", \"a\", \"b\")) #> [1] 0.5  # For 3 classes (e.g., \"x\", \"y\", \"z\"), baseline is 1/3 calculate_random_baseline(c(\"x\", \"y\", \"z\", \"x\")) #> [1] 0.3333333  # For single class, baseline is 1 calculate_random_baseline(rep(\"a\", 5)) #> [1] 1"},{"path":"/reference/car_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Car Evaluation Dataset — car_data","title":"Car Evaluation Dataset — car_data","text":"dataset containing categorical car features safety ratings.","code":""},{"path":"/reference/car_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Car Evaluation Dataset — car_data","text":"","code":"car_data"},{"path":"/reference/car_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Car Evaluation Dataset — car_data","text":"data frame 7 columns: buying Buying price (ordinal) maint Maintenance cost (ordinal) doors Number doors persons Passenger capacity lug_boot Trunk size safety Safety rating (response variable) class Car acceptability class","code":""},{"path":"/reference/car_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Car Evaluation Dataset — car_data","text":"UCI Machine Learning Repository","code":""},{"path":"/reference/check_data_quality.html","id":null,"dir":"Reference","previous_headings":"","what":"Check data quality by detecting NA values and duplicate rows — check_data_quality","title":"Check data quality by detecting NA values and duplicate rows — check_data_quality","text":"Takes dataframe, reports number NA values duplicates, removes , returns cleaned dataframe.","code":""},{"path":"/reference/check_data_quality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check data quality by detecting NA values and duplicate rows — check_data_quality","text":"","code":"check_data_quality(data)"},{"path":"/reference/check_data_quality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check data quality by detecting NA values and duplicate rows — check_data_quality","text":"data dataframe tibble.","code":""},{"path":"/reference/check_data_quality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check data quality by detecting NA values and duplicate rows — check_data_quality","text":"cleaned dataframe missing values duplicate rows.","code":""},{"path":"/reference/check_data_quality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check data quality by detecting NA values and duplicate rows — check_data_quality","text":"","code":"df <- data.frame(a = c(1, NA, 2, 2), b = c(\"x\", \"y\", \"z\", \"z\")) cleaned <- check_data_quality(df) #> Missing values found: 1 #> Duplicate rows found: 1 #> Cleaning completed. Returned cleaned dataframe."},{"path":"/reference/clean_column_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleans and standarizes column names for the loaded data. — clean_column_names","title":"Cleans and standarizes column names for the loaded data. — clean_column_names","text":"Cleans standarizes column names loaded data.","code":""},{"path":"/reference/clean_column_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleans and standarizes column names for the loaded data. — clean_column_names","text":"","code":"clean_column_names(data)"},{"path":"/reference/clean_column_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleans and standarizes column names for the loaded data. — clean_column_names","text":"data dataframe uncleaned columns.","code":""},{"path":"/reference/clean_column_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleans and standarizes column names for the loaded data. — clean_column_names","text":"dataframe cleaned columns.","code":""},{"path":"/reference/clean_column_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleans and standarizes column names for the loaded data. — clean_column_names","text":"","code":"df_raw <- data.frame(V1 = 1:3, V2 = 1:3, V3 = 1:3, V4 = 1:3,                      V5 = 1:3, V6 = 1:3, V7 = 1:3) clean_column_names(df_raw) #>   buying maint doors persons lug_boot safety class #> 1      1     1     1       1        1      1     1 #> 2      2     2     2       2        2      2     2 #> 3      3     3     3       3        3      3     3"},{"path":"/reference/compute_test_accuracy.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Test Accuracy — compute_test_accuracy","title":"Compute Test Accuracy — compute_test_accuracy","text":"Calculates proportion correct predictions.","code":""},{"path":"/reference/compute_test_accuracy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Test Accuracy — compute_test_accuracy","text":"","code":"compute_test_accuracy(predicted, actual)"},{"path":"/reference/compute_test_accuracy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Test Accuracy — compute_test_accuracy","text":"predicted vector predicted class labels. actual vector true class labels.","code":""},{"path":"/reference/compute_test_accuracy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Test Accuracy — compute_test_accuracy","text":"numeric value 0 1 representing test accuracy.","code":""},{"path":"/reference/compute_test_accuracy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Test Accuracy — compute_test_accuracy","text":"","code":"predicted <- c(\"yes\", \"no\", \"yes\", \"yes\") actual <- c(\"yes\", \"no\", \"no\", \"yes\") compute_test_accuracy(predicted, actual) #> [1] 0.75 # Returns 0.75"},{"path":"/reference/count_unique_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Unique Values — count_unique_values","title":"Count Unique Values — count_unique_values","text":"Counts occurrences unique value column data frame.","code":""},{"path":"/reference/count_unique_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Unique Values — count_unique_values","text":"","code":"count_unique_values(data)"},{"path":"/reference/count_unique_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Unique Values — count_unique_values","text":"data data frame.","code":""},{"path":"/reference/count_unique_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Unique Values — count_unique_values","text":"data frame columns: Variable, Value, Count.","code":""},{"path":"/reference/count_unique_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Unique Values — count_unique_values","text":"","code":"df <- data.frame(   A = c(\"x\", \"y\", \"x\"),   B = c(\"a\", \"a\", \"b\") ) count_unique_values(df) #> # A tibble: 4 × 3 #>   Variable Value Count #>   <chr>    <chr> <int> #> 1 A        x         2 #> 2 A        y         1 #> 3 B        a         2 #> 4 B        b         1"},{"path":"/reference/cross_validate_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform k-fold cross-validation for kNN — cross_validate_knn","title":"Perform k-fold cross-validation for kNN — cross_validate_knn","text":"Perform k-fold cross-validation kNN","code":""},{"path":"/reference/cross_validate_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform k-fold cross-validation for kNN — cross_validate_knn","text":"","code":"cross_validate_knn(train_x, train_y, k_values = seq(1, 21, 2))"},{"path":"/reference/cross_validate_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform k-fold cross-validation for kNN — cross_validate_knn","text":"train_x Training predictors. train_y Training response. k_values Vector k values try. Defaults odd values 1 21.","code":""},{"path":"/reference/cross_validate_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform k-fold cross-validation for kNN — cross_validate_knn","text":"data frame k values corresponding accuracy.","code":""},{"path":"/reference/cross_validate_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform k-fold cross-validation for kNN — cross_validate_knn","text":"","code":"set.seed(123) df <- data.frame(   buying = sample(1:4, 30, replace = TRUE),   maint = sample(1:4, 30, replace = TRUE),   persons = sample(2:5, 30, replace = TRUE),   safety = factor(sample(c(\"low\", \"med\", \"high\"), 30, replace = TRUE)) ) train_x <- df[, c(\"buying\", \"maint\", \"persons\")] train_y <- df$safety cross_validate_knn(train_x, train_y, k_values = c(1, 3, 5)) #> Loading required package: ggplot2 #> Loading required package: lattice #>   k  accuracy #> 1 1 0.2238095 #> 2 3 0.2019048 #> 3 5 0.3371429"},{"path":"/reference/decode_categorical_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Decode Categorical Features — decode_categorical_features","title":"Decode Categorical Features — decode_categorical_features","text":"Converts numerical encodings categorical features back labels.","code":""},{"path":"/reference/decode_categorical_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decode Categorical Features — decode_categorical_features","text":"","code":"decode_categorical_features(data)"},{"path":"/reference/decode_categorical_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decode Categorical Features — decode_categorical_features","text":"data data frame encoded categorical variables.","code":""},{"path":"/reference/decode_categorical_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decode Categorical Features — decode_categorical_features","text":"transformed data frame categorical labels.","code":""},{"path":"/reference/decode_categorical_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decode Categorical Features — decode_categorical_features","text":"","code":"df <- data.frame(   buying = c(1, 2, 3, 4),   maint = c(4, 3, 2, 1),   persons = c(2, 4, 5, 2),   class = c(1, 2, 3, 4),   safety = c(\"low\", \"med\", \"high\", \"low\") ) decode_categorical_features(df) #>   buying maint persons class safety #> 1    low vhigh       2 unacc    low #> 2    med  high       4   acc    med #> 3   high   med      5+  good   high #> 4  vhigh   low       2 vgood    low"},{"path":"/reference/encode_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode categorical variables with predefined levels. — encode_levels","title":"Encode categorical variables with predefined levels. — encode_levels","text":"Encode categorical variables predefined levels.","code":""},{"path":"/reference/encode_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode categorical variables with predefined levels. — encode_levels","text":"","code":"encode_levels(x)"},{"path":"/reference/encode_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode categorical variables with predefined levels. — encode_levels","text":"x character vector encode.","code":""},{"path":"/reference/encode_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode categorical variables with predefined levels. — encode_levels","text":"numeric vector representing encoded values.","code":""},{"path":"/reference/encode_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encode categorical variables with predefined levels. — encode_levels","text":"","code":"encode_levels(c(\"low\", \"med\", \"high\", \"vhigh\", \"acc\", \"vgood\", \"3\")) #> [1] 1 2 3 4 2 4 3 # Returns: 1, 2, 3, 4, 2, 4, 3"},{"path":"/reference/encode_safety.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode the safety variable. — encode_safety","title":"Encode the safety variable. — encode_safety","text":"Encode safety variable.","code":""},{"path":"/reference/encode_safety.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode the safety variable. — encode_safety","text":"","code":"encode_safety(x)"},{"path":"/reference/encode_safety.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode the safety variable. — encode_safety","text":"x character vector representing safety levels.","code":""},{"path":"/reference/encode_safety.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode the safety variable. — encode_safety","text":"numeric vector representing safety encoding.","code":""},{"path":"/reference/encode_safety.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encode the safety variable. — encode_safety","text":"","code":"encode_safety(c(\"low\", \"med\", \"high\", \"2\")) #> [1] 1 2 3 2 # Returns: 1, 2, 3, 2"},{"path":"/reference/load_car_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and clean the Car Evaluation dataset from UCI — load_car_data","title":"Load and clean the Car Evaluation dataset from UCI — load_car_data","text":"Downloads Car Evaluation dataset UCI Machine Learning Repository, assigns column names, cleans , saves result CSV file.","code":""},{"path":"/reference/load_car_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and clean the Car Evaluation dataset from UCI — load_car_data","text":"","code":"load_car_data(output_path)"},{"path":"/reference/load_car_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load and clean the Car Evaluation dataset from UCI — load_car_data","text":"output_path string specifying file path save cleaned CSV dataset.","code":""},{"path":"/reference/load_car_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and clean the Car Evaluation dataset from UCI — load_car_data","text":"tibble containing cleaned labeled dataset.","code":""},{"path":"/reference/load_car_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and clean the Car Evaluation dataset from UCI — load_car_data","text":"","code":"if (FALSE) { # \\dontrun{ cleaned_data <- load_car_data(output_path = \"data/original/car_data.csv\") } # }"},{"path":"/reference/plot_conf_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Confusion Matrix — plot_conf_matrix","title":"Plot Confusion Matrix — plot_conf_matrix","text":"Generates heatmap confusion matrix actual predicted labels.","code":""},{"path":"/reference/plot_conf_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Confusion Matrix — plot_conf_matrix","text":"","code":"plot_conf_matrix(true_labels, predicted_labels, title = \"Confusion Matrix\")"},{"path":"/reference/plot_conf_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Confusion Matrix — plot_conf_matrix","text":"true_labels factor vector actual labels. predicted_labels factor vector predicted labels. title Optional title plot.","code":""},{"path":"/reference/plot_conf_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Confusion Matrix — plot_conf_matrix","text":"ggplot object representing confusion matrix heatmap.","code":""},{"path":"/reference/plot_conf_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Confusion Matrix — plot_conf_matrix","text":"","code":"true <- factor(c(\"yes\", \"no\", \"yes\", \"no\", \"yes\")) predicted <- factor(c(\"yes\", \"no\", \"no\", \"no\", \"yes\")) plot_conf_matrix(true, predicted)"},{"path":"/reference/plot_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Distribution — plot_distribution","title":"Plot Distribution — plot_distribution","text":"Creates optionally saves bar plot showing distribution categorical variable grouped another variable.","code":""},{"path":"/reference/plot_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Distribution — plot_distribution","text":"","code":"plot_distribution(data, x_var, fill_var, title, output_path = NULL)"},{"path":"/reference/plot_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Distribution — plot_distribution","text":"data data frame. x_var categorical variable plotted x-axis. fill_var grouping variable used coloring bars. title title plot. output_path Optional file path save plot (include .png). NULL, plot saved.","code":""},{"path":"/reference/plot_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Distribution — plot_distribution","text":"ggplot object representing distribution plot.","code":""},{"path":"/reference/plot_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Distribution — plot_distribution","text":"","code":"df <- data.frame(   class = c(\"acc\", \"acc\", \"unacc\", \"unacc\", \"good\"),   safety = c(\"low\", \"med\", \"low\", \"high\", \"med\") ) plot_distribution(df, x_var = \"class\", fill_var = \"safety\", title = \"Class by Safety\")"},{"path":"/reference/save_cleaned_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the cleaned data to a specified file path. — save_cleaned_data","title":"Save the cleaned data to a specified file path. — save_cleaned_data","text":"Save cleaned data specified file path.","code":""},{"path":"/reference/save_cleaned_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the cleaned data to a specified file path. — save_cleaned_data","text":"","code":"save_cleaned_data(data, output_file)"},{"path":"/reference/save_cleaned_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the cleaned data to a specified file path. — save_cleaned_data","text":"data cleaned dataset save. output_file string, path save cleaned CSV file.","code":""},{"path":"/reference/save_cleaned_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the cleaned data to a specified file path. — save_cleaned_data","text":"message confirming file saved.","code":""},{"path":"/reference/save_cleaned_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save the cleaned data to a specified file path. — save_cleaned_data","text":"","code":"df <- data.frame(a = 1:3, b = c(\"x\", \"y\", \"z\")) save_cleaned_data(df, \"data/clean/cleaned_data.csv\") #> Cleaned data saved to: data/clean/cleaned_data.csv"},{"path":"/reference/split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split data into training and test sets — split_data","title":"Split data into training and test sets — split_data","text":"Split data training test sets","code":""},{"path":"/reference/split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split data into training and test sets — split_data","text":"","code":"split_data(data, response_col = \"safety\", prop = 0.8)"},{"path":"/reference/split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split data into training and test sets — split_data","text":"data full prepared dataset. response_col Name response column (string). prop Proportion data include training set.","code":""},{"path":"/reference/split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split data into training and test sets — split_data","text":"list train_x, train_y, test_x, test_y.","code":""},{"path":"/reference/split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split data into training and test sets — split_data","text":"","code":"df <- data.frame(   feature1 = rnorm(100),   feature2 = rnorm(100),   safety = sample(c(\"low\", \"med\", \"high\"), 100, replace = TRUE) ) split <- split_data(df, response_col = \"safety\", prop = 0.75) names(split) #> [1] \"train_x\" \"train_y\" \"test_x\"  \"test_y\"  # Returns: \"train_x\", \"train_y\", \"test_x\", \"test_y\""},{"path":"/reference/summarize_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Data — summarize_data","title":"Summarize Data — summarize_data","text":"function prints summary statistics given data frame.","code":""},{"path":"/reference/summarize_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Data — summarize_data","text":"","code":"summarize_data(data)"},{"path":"/reference/summarize_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Data — summarize_data","text":"data data frame.","code":""},{"path":"/reference/summarize_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Data — summarize_data","text":"Prints summary console.","code":""},{"path":"/reference/summarize_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Data — summarize_data","text":"","code":"df <- data.frame(   age = c(21, 25, 30),   score = c(88, 90, 95) ) summarize_data(df) #>       age            score      #>  Min.   :21.00   Min.   :88.0   #>  1st Qu.:23.00   1st Qu.:89.0   #>  Median :25.00   Median :90.0   #>  Mean   :25.33   Mean   :91.0   #>  3rd Qu.:27.50   3rd Qu.:92.5   #>  Max.   :30.00   Max.   :95.0"},{"path":"/reference/train_final_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train final kNN model using caret — train_final_model","title":"Train final kNN model using caret — train_final_model","text":"Trains k-Nearest Neighbors (kNN) classification model specified number neighbors (k) using caret package.","code":""},{"path":"/reference/train_final_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train final kNN model using caret — train_final_model","text":"","code":"train_final_model(train_x, train_y, best_k)"},{"path":"/reference/train_final_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train final kNN model using caret — train_final_model","text":"train_x data frame matrix predictor variables. train_y factor vector class labels training. best_k integer specifying optimal number neighbors use.","code":""},{"path":"/reference/train_final_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train final kNN model using caret — train_final_model","text":"caret model object class train.","code":""},{"path":"/reference/train_final_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train final kNN model using caret — train_final_model","text":"","code":"if (FALSE) { # \\dontrun{ library(caret) library(kknn)  # Needed because caret uses knn3 internally set.seed(123) df <- data.frame(x1 = rnorm(50), x2 = rnorm(50)) y <- factor(sample(c(\"yes\", \"no\"), 50, replace = TRUE)) model <- train_final_model(df, y, best_k = 5) } # }"}]
